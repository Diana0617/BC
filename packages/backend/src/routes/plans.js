const express = require('express');
const router = express.Router();
const SubscriptionPlanController = require('../controllers/SubscriptionPlanController');
const { authenticateToken } = require('../middleware/auth');
const ownerOnly = require('../middleware/ownerOnly');

/**
 * @swagger
 * tags:
 *   - name: üíé Planes de Suscripci√≥n
 *     description: |
 *       **Gesti√≥n completa de planes de suscripci√≥n con acceso p√∫blico y privado**
 *       
 *       ## üîì **Rutas P√∫blicas** (Sin autenticaci√≥n)
 *       - `GET /api/plans` - Lista planes activos con m√≥dulos incluidos
 *       - `GET /api/plans/:id` - Obtiene plan espec√≠fico activo con m√≥dulos
 *       
 *       ## üîí **Rutas Privadas** (Requieren autenticaci√≥n OWNER)
 *       - `POST /api/plans` - Crear nuevo plan
 *       - `PUT /api/plans/:id` - Actualizar plan existente
 *       - `DELETE /api/plans/:id` - Eliminar plan
 *       - Gesti√≥n de m√≥dulos y configuraciones avanzadas
 *       
 *       ## ‚ú® **Caracter√≠sticas Especiales**
 *       - **üì¶ M√≥dulos Autom√°ticos**: Las rutas p√∫blicas incluyen m√≥dulos por defecto
 *       - **üéØ Filtrado Inteligente**: Solo planes ACTIVE visibles p√∫blicamente
 *       - **üìÑ Paginaci√≥n Completa**: Informaci√≥n detallada de navegaci√≥n
 *       - **üîç B√∫squeda Avanzada**: Por nombre y descripci√≥n
 */

// === DEBUG ROUTE - Ruta de prueba sin middleware ===
router.get('/test-public', (req, res) => {
  res.json({
    success: true,
    message: 'Ruta p√∫blica funcionando correctamente',
    timestamp: new Date().toISOString(),
    hasUser: !!req.user
  });
});

// === RUTAS P√öBLICAS (sin autenticaci√≥n) ===
// IMPORTANTE: Estas deben ir ANTES del middleware de autenticaci√≥n

/**
 * @swagger
 * /api/plans/{id}:
 *   get:
 *     summary: Obtener plan por ID (P√öBLICO)
 *     description: |
 *       Obtiene la informaci√≥n detallada de un plan espec√≠fico de forma p√∫blica.
 *       
 *       **üîì Acceso P√∫blico**: Esta ruta no requiere autenticaci√≥n.
 *       
 *       **üì¶ M√≥dulos Incluidos**: Los m√≥dulos se incluyen autom√°ticamente por defecto en peticiones p√∫blicas.
 *       
 *       **üéØ Filtrado**: Solo se muestran planes con status ACTIVE para peticiones p√∫blicas.
 *     tags: [üíé Planes de Suscripci√≥n]
 *     parameters:
 *       - in: path
 *         name: id
 *         required: true
 *         schema:
 *           type: string
 *           format: uuid
 *         description: ID √∫nico del plan
 *         example: "123e4567-e89b-12d3-a456-426614174000"
 *       - in: query
 *         name: includeModules
 *         schema:
 *           type: boolean
 *           default: true
 *         description: Incluir m√≥dulos en la respuesta (true por defecto en peticiones p√∫blicas)
 *     responses:
 *       200:
 *         description: Plan obtenido exitosamente con m√≥dulos incluidos
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 success:
 *                   type: boolean
 *                   example: true
 *                 data:
 *                   allOf:
 *                     - $ref: '#/components/schemas/SubscriptionPlan'
 *                     - type: object
 *                       properties:
 *                         modules:
 *                           type: array
 *                           description: M√≥dulos incluidos en el plan
 *                           items:
 *                             type: object
 *                             properties:
 *                               id:
 *                                 type: string
 *                                 format: uuid
 *                               name:
 *                                 type: string
 *                               displayName:
 *                                 type: string
 *                               icon:
 *                                 type: string
 *                               category:
 *                                 type: string
 *                               PlanModule:
 *                                 type: object
 *                                 properties:
 *                                   isIncluded:
 *                                     type: boolean
 *                                   limitQuantity:
 *                                     type: integer
 *                                     nullable: true
 *                                   additionalPrice:
 *                                     type: number
 *                                   configuration:
 *                                     type: object
 *       404:
 *         description: Plan no encontrado o no disponible p√∫blicamente
 *         content:
 *           application/json:
 *             schema:
 *               $ref: '#/components/schemas/Error'
 */
router.get('/:id', SubscriptionPlanController.getPlanById);

/**
 * @swagger
 * /api/plans:
 *   get:
 *     summary: Obtener todos los planes de suscripci√≥n (P√öBLICO)
 *     description: |
 *       Lista todos los planes disponibles p√∫blicamente con paginaci√≥n y filtros.
 *       
 *       **üîì Acceso P√∫blico**: Esta ruta no requiere autenticaci√≥n.
 *       
 *       **üì¶ M√≥dulos Incluidos**: Los m√≥dulos se incluyen autom√°ticamente por defecto en peticiones p√∫blicas.
 *       
 *       **üéØ Filtrado**: Solo se muestran planes con status ACTIVE para peticiones p√∫blicas.
 *       
 *       **üìÑ Paginaci√≥n**: Incluye informaci√≥n completa de paginaci√≥n y filtros aplicados.
 *     tags: [üíé Planes de Suscripci√≥n]
 *     parameters:
 *       - in: query
 *         name: page
 *         schema:
 *           type: integer
 *           default: 1
 *         description: N√∫mero de p√°gina
 *       - in: query
 *         name: limit
 *         schema:
 *           type: integer
 *           default: 10
 *         description: Elementos por p√°gina
 *       - in: query
 *         name: status
 *         schema:
 *           type: string
 *           enum: [ACTIVE]
 *           default: ACTIVE
 *         description: Solo planes activos disponibles en rutas p√∫blicas (filtro autom√°tico)
 *       - in: query
 *         name: search
 *         schema:
 *           type: string
 *         description: B√∫squeda por nombre o descripci√≥n del plan
 *       - in: query
 *         name: includeModules
 *         schema:
 *           type: boolean
 *           default: true
 *         description: Incluir m√≥dulos en la respuesta (true por defecto en peticiones p√∫blicas)
 *     responses:
 *       200:
 *         description: Lista de planes obtenida exitosamente con m√≥dulos incluidos
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 success:
 *                   type: boolean
 *                   example: true
 *                 data:
 *                   type: array
 *                   description: Lista de planes con m√≥dulos incluidos
 *                   items:
 *                     allOf:
 *                       - $ref: '#/components/schemas/SubscriptionPlan'
 *                       - type: object
 *                         properties:
 *                           modules:
 *                             type: array
 *                             description: M√≥dulos incluidos en el plan
 *                             items:
 *                               type: object
 *                               properties:
 *                                 id:
 *                                   type: string
 *                                   format: uuid
 *                                 name:
 *                                   type: string
 *                                 displayName:
 *                                   type: string
 *                                 icon:
 *                                   type: string
 *                                 category:
 *                                   type: string
 *                                 status:
 *                                   type: string
 *                                   enum: [ACTIVE, INACTIVE]
 *                                 pricing:
 *                                   type: object
 *                                 PlanModule:
 *                                   type: object
 *                                   properties:
 *                                     isIncluded:
 *                                       type: boolean
 *                                       description: Si el m√≥dulo est√° incluido en el plan
 *                                     limitQuantity:
 *                                       type: integer
 *                                       nullable: true
 *                                       description: Cantidad l√≠mite del m√≥dulo
 *                                     additionalPrice:
 *                                       type: number
 *                                       description: Precio adicional del m√≥dulo
 *                                     configuration:
 *                                       type: object
 *                                       description: Configuraci√≥n espec√≠fica del m√≥dulo
 *                 pagination:
 *                   type: object
 *                   properties:
 *                     currentPage:
 *                       type: integer
 *                       example: 1
 *                     totalPages:
 *                       type: integer
 *                       example: 1
 *                     totalItems:
 *                       type: integer
 *                       example: 4
 *                     itemsPerPage:
 *                       type: integer
 *                       example: 10
 *                     hasNextPage:
 *                       type: boolean
 *                       example: false
 *                     hasPrevPage:
 *                       type: boolean
 *                       example: false
 *                     nextPage:
 *                       type: integer
 *                       nullable: true
 *                       example: null
 *                     prevPage:
 *                       type: integer
 *                       nullable: true
 *                       example: null
 *                 filters:
 *                   type: object
 *                   properties:
 *                     statuses:
 *                       type: array
 *                       items:
 *                         type: string
 *                       example: ["ACTIVE"]
 *                       description: Estados de planes aplicados como filtro
 *       400:
 *         description: Error de validaci√≥n en par√°metros
 *         content:
 *           application/json:
 *             schema:
 *               $ref: '#/components/schemas/Error'
 *       500:
 *         description: Error interno del servidor
 *         content:
 *           application/json:
 *             schema:
 *               $ref: '#/components/schemas/Error'
 */
router.get('/', SubscriptionPlanController.getPlans);

// === MIDDLEWARE DE AUTENTICACI√ìN PARA RUTAS PROTEGIDAS ===
// Todas las rutas debajo de esta l√≠nea requieren autenticaci√≥n
router.use(authenticateToken);

/**
 * @swagger
 * /api/plans/available-modules:
 *   get:
 *     summary: Obtener m√≥dulos disponibles para planes
 *     description: Lista m√≥dulos disponibles para crear/editar planes (solo OWNER)
 *     tags: [üíé Planes de Suscripci√≥n]
 *     security:
 *       - bearerAuth: []
 *     parameters:
 *       - in: query
 *         name: category
 *         schema:
 *           type: string
 *           enum: [CORE, APPOINTMENT, INVENTORY, SALES, REPORTING, COMMUNICATION, SECURITY]
 *         description: Filtrar por categor√≠a
 *       - in: query
 *         name: status
 *         schema:
 *           type: string
 *           enum: [ACTIVE, INACTIVE, DEPRECATED]
 *           default: ACTIVE
 *         description: Filtrar por estado
 *     responses:
 *       200:
 *         description: M√≥dulos disponibles obtenidos exitosamente
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 success:
 *                   type: boolean
 *                   example: true
 *                 modules:
 *                   type: array
 *                   items:
 *                     $ref: '#/components/schemas/Module'
 *                 totalModules:
 *                   type: integer
 *                   example: 12
 *       401:
 *         description: No autorizado
 *         content:
 *           application/json:
 *             schema:
 *               $ref: '#/components/schemas/Error'
 *       403:
 *         description: Sin permisos de OWNER
 *         content:
 *           application/json:
 *             schema:
 *               $ref: '#/components/schemas/Error'
 */
router.get('/available-modules', ownerOnly, SubscriptionPlanController.getAvailableModules);

/**
 * @swagger
 * /api/plans/calculate-price:
 *   post:
 *     summary: Calcular precio de plan
 *     description: Calcula el precio total de un plan basado en m√≥dulos seleccionados (solo OWNER)
 *     tags: [üíé Planes de Suscripci√≥n]
 *     security:
 *       - bearerAuth: []
 *     requestBody:
 *       required: true
 *       content:
 *         application/json:
 *           schema:
 *             type: object
 *             required:
 *               - modules
 *               - basePlanPrice
 *             properties:
 *               modules:
 *                 type: array
 *                 items:
 *                   type: string
 *                   format: uuid
 *                 description: Array de IDs de m√≥dulos seleccionados
 *                 example: ["123e4567-e89b-12d3-a456-426614174000", "789e4567-e89b-12d3-a456-426614174000"]
 *               basePlanPrice:
 *                 type: number
 *                 description: Precio base del plan en centavos
 *                 example: 50000
 *           example:
 *             modules: ["123e4567-e89b-12d3-a456-426614174000", "789e4567-e89b-12d3-a456-426614174000"]
 *             basePlanPrice: 50000
 *     responses:
 *       200:
 *         description: Precio calculado exitosamente
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 success:
 *                   type: boolean
 *                   example: true
 *                 pricing:
 *                   type: object
 *                   properties:
 *                     basePlanPrice:
 *                       type: number
 *                       example: 50000
 *                     modulesPrice:
 *                       type: number
 *                       example: 15000
 *                     totalPrice:
 *                       type: number
 *                       example: 65000
 *                     moduleBreakdown:
 *                       type: array
 *                       items:
 *                         type: object
 *                         properties:
 *                           moduleId:
 *                             type: string
 *                             format: uuid
 *                           name:
 *                             type: string
 *                           price:
 *                             type: number
 *       400:
 *         description: Error de validaci√≥n o m√≥dulos inv√°lidos
 *         content:
 *           application/json:
 *             schema:
 *               $ref: '#/components/schemas/Error'
 *       401:
 *         description: No autorizado
 *         content:
 *           application/json:
 *             schema:
 *               $ref: '#/components/schemas/Error'
 *       403:
 *         description: Sin permisos de OWNER
 *         content:
 *           application/json:
 *             schema:
 *               $ref: '#/components/schemas/Error'
 */
router.post('/calculate-price', ownerOnly, SubscriptionPlanController.calculatePlanPrice);

// === RUTAS ADMINISTRATIVAS (solo para OWNER) ===

/**
 * @swagger
 * /api/plans:
 *   post:
 *     summary: Crear nuevo plan de suscripci√≥n
 *     description: Crea un nuevo plan de suscripci√≥n con m√≥dulos seleccionados (solo OWNER)
 *     tags: [üíé Planes de Suscripci√≥n]
 *     security:
 *       - bearerAuth: []
 *     requestBody:
 *       required: true
 *       content:
 *         application/json:
 *           schema:
 *             type: object
 *             required:
 *               - name
 *               - price
 *               - duration
 *               - description
 *               - modules
 *             properties:
 *               name:
 *                 type: string
 *                 description: Nombre del plan
 *                 example: "Plan Premium"
 *               price:
 *                 type: number
 *                 description: Precio del plan en centavos
 *                 example: 99900
 *               duration:
 *                 type: integer
 *                 description: Duraci√≥n del plan en d√≠as
 *                 example: 30
 *               description:
 *                 type: string
 *                 description: Descripci√≥n detallada del plan
 *                 example: "Plan completo con todas las funcionalidades"
 *               features:
 *                 type: array
 *                 items:
 *                   type: string
 *                 description: Lista de caracter√≠sticas del plan
 *                 example: ["Citas ilimitadas", "Inventario completo", "Reportes avanzados"]
 *               modules:
 *                 type: array
 *                 items:
 *                   type: string
 *                   format: uuid
 *                 description: IDs de m√≥dulos incluidos en el plan
 *                 example: ["123e4567-e89b-12d3-a456-426614174000", "789e4567-e89b-12d3-a456-426614174000"]
 *               status:
 *                 type: string
 *                 enum: [ACTIVE, INACTIVE, DEPRECATED]
 *                 default: ACTIVE
 *                 description: Estado del plan
 *               isPopular:
 *                 type: boolean
 *                 default: false
 *                 description: Marcar como plan popular
 *               maxBusinesses:
 *                 type: integer
 *                 description: N√∫mero m√°ximo de negocios permitidos
 *                 example: 1
 *     responses:
 *       201:
 *         description: Plan creado exitosamente
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 success:
 *                   type: boolean
 *                   example: true
 *                 plan:
 *                   $ref: '#/components/schemas/SubscriptionPlan'
 *       400:
 *         description: Error de validaci√≥n
 *         content:
 *           application/json:
 *             schema:
 *               $ref: '#/components/schemas/Error'
 *       401:
 *         description: No autorizado
 *         content:
 *           application/json:
 *             schema:
 *               $ref: '#/components/schemas/Error'
 *       403:
 *         description: Sin permisos de OWNER
 *         content:
 *           application/json:
 *             schema:
 *               $ref: '#/components/schemas/Error'
 */
router.post('/', ownerOnly, SubscriptionPlanController.createPlan);

/**
 * @swagger
 * /api/plans/{id}:
 *   put:
 *     summary: Actualizar plan de suscripci√≥n
 *     description: Actualiza la informaci√≥n de un plan existente (solo OWNER)
 *     tags: [üíé Planes de Suscripci√≥n]
 *     security:
 *       - bearerAuth: []
 *     parameters:
 *       - in: path
 *         name: id
 *         required: true
 *         schema:
 *           type: string
 *           format: uuid
 *         description: ID √∫nico del plan
 *         example: "123e4567-e89b-12d3-a456-426614174000"
 *     requestBody:
 *       required: true
 *       content:
 *         application/json:
 *           schema:
 *             type: object
 *             properties:
 *               name:
 *                 type: string
 *                 description: Nombre del plan
 *                 example: "Plan Premium Plus"
 *               price:
 *                 type: number
 *                 description: Precio del plan en centavos
 *                 example: 129900
 *               description:
 *                 type: string
 *                 description: Descripci√≥n detallada del plan
 *                 example: "Plan premium con caracter√≠sticas avanzadas"
 *               features:
 *                 type: array
 *                 items:
 *                   type: string
 *                 description: Lista de caracter√≠sticas del plan
 *               modules:
 *                 type: array
 *                 items:
 *                   type: string
 *                   format: uuid
 *                 description: IDs de m√≥dulos incluidos en el plan
 *               isPopular:
 *                 type: boolean
 *                 description: Marcar como plan popular
 *               maxBusinesses:
 *                 type: integer
 *                 description: N√∫mero m√°ximo de negocios permitidos
 *     responses:
 *       200:
 *         description: Plan actualizado exitosamente
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 success:
 *                   type: boolean
 *                   example: true
 *                 plan:
 *                   $ref: '#/components/schemas/SubscriptionPlan'
 *       400:
 *         description: Error de validaci√≥n
 *         content:
 *           application/json:
 *             schema:
 *               $ref: '#/components/schemas/Error'
 *       404:
 *         description: Plan no encontrado
 *         content:
 *           application/json:
 *             schema:
 *               $ref: '#/components/schemas/Error'
 *       401:
 *         description: No autorizado
 *         content:
 *           application/json:
 *             schema:
 *               $ref: '#/components/schemas/Error'
 *       403:
 *         description: Sin permisos de OWNER
 *         content:
 *           application/json:
 *             schema:
 *               $ref: '#/components/schemas/Error'
 */
router.put('/:id', ownerOnly, SubscriptionPlanController.updatePlan);

/**
 * @swagger
 * /api/plans/{id}/status:
 *   patch:
 *     summary: Cambiar estado del plan
 *     description: Actualiza el estado de un plan (ACTIVE, INACTIVE, DEPRECATED) - Solo OWNER
 *     tags: [üíé Planes de Suscripci√≥n]
 *     security:
 *       - bearerAuth: []
 *     parameters:
 *       - in: path
 *         name: id
 *         required: true
 *         schema:
 *           type: string
 *           format: uuid
 *         description: ID √∫nico del plan
 *         example: "123e4567-e89b-12d3-a456-426614174000"
 *     requestBody:
 *       required: true
 *       content:
 *         application/json:
 *           schema:
 *             type: object
 *             required:
 *               - status
 *             properties:
 *               status:
 *                 type: string
 *                 enum: [ACTIVE, INACTIVE, DEPRECATED]
 *                 description: Nuevo estado del plan
 *                 example: "INACTIVE"
 *     responses:
 *       200:
 *         description: Estado del plan actualizado exitosamente
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 success:
 *                   type: boolean
 *                   example: true
 *                 plan:
 *                   $ref: '#/components/schemas/SubscriptionPlan'
 *                 message:
 *                   type: string
 *                   example: "Estado del plan actualizado a INACTIVE"
 *       400:
 *         description: Estado inv√°lido
 *         content:
 *           application/json:
 *             schema:
 *               $ref: '#/components/schemas/Error'
 *       404:
 *         description: Plan no encontrado
 *         content:
 *           application/json:
 *             schema:
 *               $ref: '#/components/schemas/Error'
 *       401:
 *         description: No autorizado
 *         content:
 *           application/json:
 *             schema:
 *               $ref: '#/components/schemas/Error'
 *       403:
 *         description: Sin permisos de OWNER
 *         content:
 *           application/json:
 *             schema:
 *               $ref: '#/components/schemas/Error'
 */
/**
 * @swagger
 * /api/plans/{id}/toggle-status:
 *   patch:
 *     summary: Alternar estado del plan (ACTIVE <-> INACTIVE)
 *     description: Cambia el estado del plan entre ACTIVE e INACTIVE autom√°ticamente
 *     tags: [üíé Planes de Suscripci√≥n]
 *     security:
 *       - bearerAuth: []
 *     parameters:
 *       - in: path
 *         name: id
 *         required: true
 *         schema:
 *           type: string
 *           format: uuid
 *         description: ID del plan
 *     responses:
 *       200:
 *         description: Estado del plan alternado exitosamente
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 success:
 *                   type: boolean
 *                   example: true
 *                 data:
 *                   $ref: '#/components/schemas/SubscriptionPlan'
 *                 message:
 *                   type: string
 *       404:
 *         description: Plan no encontrado
 *         content:
 *           application/json:
 *             schema:
 *               $ref: '#/components/schemas/Error'
 */
router.patch('/:id/toggle-status', ownerOnly, SubscriptionPlanController.togglePlanStatus);

router.patch('/:id/status', ownerOnly, SubscriptionPlanController.updatePlanStatus);

/**
 * @swagger
 * /api/plans/{id}:
 *   delete:
 *     summary: Eliminar plan (deprecar)
 *     description: Marca un plan como DEPRECATED (eliminaci√≥n l√≥gica) - Solo OWNER
 *     tags: [üíé Planes de Suscripci√≥n]
 *     security:
 *       - bearerAuth: []
 *     parameters:
 *       - in: path
 *         name: id
 *         required: true
 *         schema:
 *           type: string
 *           format: uuid
 *         description: ID √∫nico del plan
 *         example: "123e4567-e89b-12d3-a456-426614174000"
 *     responses:
 *       200:
 *         description: Plan marcado como DEPRECATED exitosamente
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 success:
 *                   type: boolean
 *                   example: true
 *                 message:
 *                   type: string
 *                   example: "Plan marcado como DEPRECATED exitosamente"
 *                 plan:
 *                   $ref: '#/components/schemas/SubscriptionPlan'
 *       404:
 *         description: Plan no encontrado
 *         content:
 *           application/json:
 *             schema:
 *               $ref: '#/components/schemas/Error'
 *       401:
 *         description: No autorizado
 *         content:
 *           application/json:
 *             schema:
 *               $ref: '#/components/schemas/Error'
 *       403:
 *         description: Sin permisos de OWNER
 *         content:
 *           application/json:
 *             schema:
 *               $ref: '#/components/schemas/Error'
 *       409:
 *         description: Plan en uso por suscripciones activas
 *         content:
 *           application/json:
 *             schema:
 *               $ref: '#/components/schemas/Error'
 */
/**
 * @swagger
 * /api/plans/{id}/toggle-status:
 *   patch:
 *     summary: Alternar estado del plan (ACTIVE <-> INACTIVE)
 *     description: Cambia el estado del plan entre ACTIVE e INACTIVE autom√°ticamente
 *     tags: [üíé Planes de Suscripci√≥n]
 *     security:
 *       - bearerAuth: []
 *     parameters:
 *       - in: path
 *         name: id
 *         required: true
 *         schema:
 *           type: string
 *           format: uuid
 *         description: ID del plan
 *     responses:
 *       200:
 *         description: Estado del plan alternado exitosamente
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 success:
 *                   type: boolean
 *                   example: true
 *                 data:
 *                   $ref: '#/components/schemas/SubscriptionPlan'
 *                 message:
 *                   type: string
 *       404:
 *         description: Plan no encontrado
 *         content:
 *           application/json:
 *             schema:
 *               $ref: '#/components/schemas/Error'
 */
router.delete('/:id', ownerOnly, SubscriptionPlanController.deletePlan);

module.exports = router;